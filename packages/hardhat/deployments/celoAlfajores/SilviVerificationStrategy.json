{
  "address": "0xeF4F2E36c03e4FD5c9caB1C1f6522AeB3Eb19c01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_schema",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Allocate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct PoolConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "Configure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "schema",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Review",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "allocationToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "distributionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct PoolConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "configure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eas",
      "outputs": [
        {
          "internalType": "contract IEAS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDistributed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "admins",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "allocationToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "timestamps",
              "type": "uint64[]"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "internalType": "struct PoolConfig",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registrations",
      "outputs": [
        {
          "internalType": "enum IPool.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "review",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schema",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x023e0b3da3352103eeb10526c7c972c93e7174a4ce882fcf71d04a9966677e16",
  "receipt": {
    "to": null,
    "from": "0x1473d1559B7469ED2B9A51790b7177a74958c5bB",
    "contractAddress": "0xeF4F2E36c03e4FD5c9caB1C1f6522AeB3Eb19c01",
    "transactionIndex": 3,
    "gasUsed": "2490347",
    "logsBloom": "0x
    "blockHash": "0x8a852ad27b30499430aa839e10bf7e4d94bfc830f886e663da9f2517de7e226b",
    "transactionHash": "0x023e0b3da3352103eeb10526c7c972c93e7174a4ce882fcf71d04a9966677e16",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 51731398,
        "transactionHash": "0x023e0b3da3352103eeb10526c7c972c93e7174a4ce882fcf71d04a9966677e16",
        "address": "0xeF4F2E36c03e4FD5c9caB1C1f6522AeB3Eb19c01",
        "topics": [
          "0x72aeb8e4e073b2b6fc374bc9e1acd0b59d25c19bc96e662f34e973d1ad9ff9fc",
          "0x0000000000000000000000001473d1559b7469ed2b9a51790b7177a74958c5bb"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001b53696c766920566572696669636174696f6e2053747261746567790000000000000000000000000000000000000000000000000000000000000000000000005a6164647265737320726563697069656e742c2075696e7432353620616d6f756e742c206279746573333220636c61696d4174746573746174696f6e5549442c206279746573333220676f616c4174746573746174696f6e5549440000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x8a852ad27b30499430aa839e10bf7e4d94bfc830f886e663da9f2517de7e226b"
      }
    ],
    "blockNumber": 51731398,
    "cumulativeGasUsed": "2698751",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Silvi Verification Strategy",
    "address recipient, uint256 amount, bytes32 claimAttestationUID, bytes32 goalAttestationUID",
    ""
  ],
  "numDeployments": 3,
  "solcInputHash": "c11ead8b0d685f9f7b067c07822ac18f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_schema\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct PoolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Review\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eas\",\"outputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"allocationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"timestamps\",\"type\":\"uint64[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registrations\",\"outputs\":[{\"internalType\":\"enum IPool.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"review\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schema\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"configure((address,address[],address,address,uint256,uint64[],string))\":{\"params\":{\"_config\":\"The configuration for the pool.\"}},\"distribute(address[],uint256[],bytes[])\":{\"details\":\"This function can only be called by the contract owner or admins.\",\"params\":{\"amounts\":\"The amounts of tokens to distribute to each recipient.\",\"data\":\"Additional data that can be used during distribution, such as attestation UIDs.\",\"recipients\":\"The addresses of the recipients to distribute tokens to.\"}},\"fund(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to top up the pool with.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize((address,address[],address,address,uint256,uint64[],string),bytes)\":{\"params\":{\"_config\":\"The configuration for the pool.\",\"data\":\"Additional data that can be used during initialization.\"}},\"liquidate()\":{\"details\":\"This function can only be called by the contract owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configure((address,address[],address,address,uint256,uint64[],string))\":{\"notice\":\"Configures the pool with the provided configuration and grants the admin role to the owner and admins specified in the config.\"},\"distribute(address[],uint256[],bytes[])\":{\"notice\":\"Transfers tokens from the contract to recipients.\"},\"fund(uint256)\":{\"notice\":\"Tops up the pool with the specified amount of tokens configured in either initialize() or configure() then updates the amountDeployed tracking variable.\"},\"getTotalDistributed()\":{\"notice\":\"Returns the total amount of tokens distributed from the pool.\"},\"getTotalFunded()\":{\"notice\":\"Returns the total amount of tokens funded in the pool.\"},\"initialize((address,address[],address,address,uint256,uint64[],string),bytes)\":{\"notice\":\"Initializes the pool with the provided configuration and grants the admin role to the owner and admins specified in the config.\"},\"liquidate()\":{\"notice\":\"Sends the contract's balance back to the owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/SilviVerificationStrategy.sol\":\"SilviVerificationStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID of the new attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xdad0674defce04905dc7935f2756d6c477a6e876c0b1b7094b112a862f164c12\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"./../Common.sol\\\";\\nimport { ISemver } from \\\"./../ISemver.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xb7d1961ed928c620cddf35c2bf46845b10828bc5d73145214630202ed355b6bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct PoolConfig {\\r\\n    address owner;\\r\\n    address[] admins;\\r\\n    address allocationToken;\\r\\n    address distributionToken;\\r\\n    uint256 maxAmount;\\r\\n    uint64[] timestamps;\\r\\n    string metadataURI;\\r\\n}\\r\\n\\r\\ninterface IPool {\\r\\n    enum Status {\\r\\n        pending,\\r\\n        approved,\\r\\n        rejected\\r\\n    }\\r\\n\\r\\n    struct Registration {\\r\\n        Status status;\\r\\n        address owner;\\r\\n        string metadataURI;\\r\\n        bytes data; // Data can contain information that can be accessed later\\r\\n    }\\r\\n\\r\\n    function schema() external view returns (string memory);\\r\\n\\r\\n    event Deployed(string name, address indexed owner, string schema, string metadataURI);\\r\\n    event Allocate(address indexed from, address indexed to, uint256 amount, address token, bytes data);\\r\\n    event Register(address indexed project, address indexed owner, string metadataURI, bytes data);\\r\\n    event Review(address indexed project, uint8 status, address indexed approver, string metadataURI, bytes data);\\r\\n    event Update(address indexed project, address indexed updater, string metadataURI, bytes data);\\r\\n    event Configure(address indexed updater, PoolConfig config);\\r\\n\\r\\n    function initialize(PoolConfig memory config, bytes memory data) external;\\r\\n    function configure(PoolConfig memory config) external;\\r\\n    function register(address project, string memory metadataURI, bytes memory data) external;\\r\\n    function update(address project, string memory metadataURI, bytes memory data) external;\\r\\n    function review(address project, uint8 status, string memory metadataURI, bytes memory data) external;\\r\\n    function allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\r\\n        external;\\r\\n    function distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\r\\n        external;\\r\\n}\\r\\n\\r\\n/*\\r\\nTypes of Pools:\\r\\nDirectGrants - pool manager transfer funds directly to projects\\r\\nRetroFunding - selected voters vote on projects and pool gets distributed based on the votes\\r\\nQuadraticFunding - people vote with money tokens and get matching funds from the pool based on quadratic formula\\r\\nDedicatedDomainAllocation - selected panel of domain experts decide what projects receive matching funds\\r\\nRFPs\\r\\nBounties\\r\\nCrowdfunding\\r\\n*/\\r\\ncontract Pool is IPool {\\r\\n    bool private _initialized;\\r\\n    PoolConfig public config;\\r\\n    string public schema;\\r\\n\\r\\n    mapping(address => Registration) public registrations;\\r\\n\\r\\n    /**\\r\\n     * @param _name Name of the Pool Strategy\\r\\n     * @param _schema Schema of the Pool (uint256 param, string anotherParam) - can be used for passing custom data\\r\\n     * @param _metadataURI Metadata URI of the Pool (title, description, etc.)\\r\\n     */\\r\\n    constructor(string memory _name, string memory _schema, string memory _metadataURI) {\\r\\n        // Emit an event for the Indexer so Pools can be created with this Strategy\\r\\n        emit Deployed(_name, msg.sender, _schema, _metadataURI);\\r\\n        schema = _schema;\\r\\n    }\\r\\n\\r\\n    function initialize(PoolConfig memory _config, bytes memory data) public virtual {\\r\\n        require(!_initialized, \\\"Already initialized\\\");\\r\\n        _initialized = true;\\r\\n        config = _config;\\r\\n    }\\r\\n\\r\\n    function _configure(PoolConfig memory _config) internal virtual {\\r\\n        // Logic for updating the Pool handled in calling contract\\r\\n        config = _config;\\r\\n        emit Configure(msg.sender, _config);\\r\\n    }\\r\\n\\r\\n    // MetadataURI contain details about project application\\r\\n    function _register(address project, string memory _metadataURI, bytes memory data) internal {\\r\\n        require(registrations[project].owner == address(0), \\\"Already registered\\\");\\r\\n        registrations[project] = Registration(Status.pending, msg.sender, _metadataURI, data);\\r\\n        emit Register(project, msg.sender, _metadataURI, data);\\r\\n    }\\r\\n\\r\\n    function _review(address project, uint8 status, string memory _metadataURI, bytes memory data) internal {\\r\\n        Registration storage registration = registrations[project];\\r\\n        registration.status = Status(status);\\r\\n        // MetadataURI can contain information about review, or potential rejection reason\\r\\n        emit Review(project, status, msg.sender, _metadataURI, data);\\r\\n    }\\r\\n\\r\\n    function _update(address project, string memory _metadataURI, bytes memory data) internal {\\r\\n        require(registrations[project].owner == msg.sender, \\\"Must be owner to update\\\");\\r\\n        require(registrations[project].status != Status.approved, \\\"Already approved\\\");\\r\\n        registrations[project].metadataURI = _metadataURI;\\r\\n        registrations[project].data = data;\\r\\n        emit Update(project, msg.sender, _metadataURI, data);\\r\\n    }\\r\\n\\r\\n    // Allocate tokens to recipients (transfers tokens from caller to recipients)\\r\\n    // This can be used to transfer tokens to projects, or the contract itself to fund with matching funds for example\\r\\n    function _allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\r\\n        internal\\r\\n    {\\r\\n        uint256 length = recipients.length;\\r\\n        require(length > 0 && length == amounts.length, \\\"Mismatched lengths\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            bytes memory _data = i < data.length ? data[i] : bytes(\\\"\\\");\\r\\n            require(recipients[i] != address(0), \\\"Recipient is zero address\\\");\\r\\n            require(amounts[i] > 0, \\\"Amount is zero\\\");\\r\\n            _beforeAllocate(recipients[i], amounts[i], token, _data);\\r\\n            IERC20(token).transferFrom(msg.sender, recipients[i], amounts[i]);\\r\\n            emit Allocate(msg.sender, recipients[i], amounts[i], token, _data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Distribute tokens to recipients (transfers tokens from the contract to recipients)\\r\\n    // Can be used to distribute matching funds to projects\\r\\n    function _distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\r\\n        internal\\r\\n    {\\r\\n        uint256 length = recipients.length;\\r\\n        require(length > 0 && length == amounts.length, \\\"Mismatched lengths\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            bytes memory _data = i < data.length ? data[i] : bytes(\\\"\\\");\\r\\n            require(recipients[i] != address(0), \\\"Recipient is zero address\\\");\\r\\n            require(\\r\\n                amounts[i] > 0 && amounts[i] <= IERC20(token).balanceOf(address(this)),\\r\\n                \\\"Amount is zero or exceeds balance\\\"\\r\\n            );\\r\\n            _beforeDistribute(recipients[i], amounts[i], token, _data);\\r\\n            IERC20(token).transfer(recipients[i], amounts[i]);\\r\\n            emit Allocate(address(this), recipients[i], amounts[i], token, _data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeAllocate(address recipient, uint256 amount, address token, bytes memory data) internal virtual {}\\r\\n    function _beforeDistribute(address recipient, uint256 amount, address token, bytes memory data) internal virtual {}\\r\\n\\r\\n    function configure(PoolConfig memory _config) external virtual override {\\r\\n        _configure(_config);\\r\\n    }\\r\\n\\r\\n    function register(address project, string memory metadataURI, bytes memory data) external virtual override {\\r\\n        _register(project, metadataURI, data);\\r\\n    }\\r\\n\\r\\n    function update(address project, string memory metadataURI, bytes memory data) external virtual override {\\r\\n        _update(project, metadataURI, data);\\r\\n    }\\r\\n\\r\\n    function review(address project, uint8 status, string memory metadataURI, bytes memory data)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        _review(project, status, metadataURI, data);\\r\\n    }\\r\\n\\r\\n    function allocate(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        _allocate(recipients, amounts, token, data);\\r\\n    }\\r\\n\\r\\n    function distribute(address[] memory recipients, uint256[] memory amounts, address token, bytes[] memory data)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        _distribute(recipients, amounts, token, data);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2ffd1dd34f247ac3e376c48e6aa27deef451c505a92df6b704a336f96e90a3cd\",\"license\":\"MIT\"},\"contracts/strategies/SilviVerificationStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"../Pool.sol\\\";\\r\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Pool, PoolConfig} from \\\"../Pool.sol\\\";\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IEAS} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\r\\n\\r\\n\\r\\ncontract SilviVerificationStrategy is Pool, Context, AccessControl, ReentrancyGuard {\\r\\n    uint256 private totalFunded = 0;\\r\\n    uint256 private totalDistributed = 0;\\r\\n\\r\\n    IEAS public eas;\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n\\r\\n    constructor(string memory _name, string memory _schema, string memory _metadataURI) Pool(_name, _schema, _metadataURI) {}\\r\\n\\r\\n    /// ======================================\\r\\n    /// ========== Permissioning =============\\r\\n    /// ======================================\\r\\n\\r\\n    /// @notice Initializes the pool with the provided configuration and grants the admin role to the owner and admins specified in the config.\\r\\n    /// @param _config The configuration for the pool.\\r\\n    /// @param data Additional data that can be used during initialization.\\r\\n    function initialize(PoolConfig memory _config, bytes memory data) public override {\\r\\n        super.initialize(_config, data);\\r\\n\\r\\n        // Decode easAddress from data\\r\\n        if (data.length > 0) {\\r\\n            address easAddress = abi.decode(data, (address));\\r\\n            if (easAddress != address(0)) {\\r\\n                eas = IEAS(easAddress);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Grant the default admin role to the owner\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, _config.owner);\\r\\n\\r\\n        // Grant the admin role to the owner and admins specified in the config\\r\\n        _grantRole(ADMIN_ROLE, _config.owner);\\r\\n        for (uint256 i = 0; i < _config.admins.length; i++) {\\r\\n            _grantRole(ADMIN_ROLE, _config.admins[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Configures the pool with the provided configuration and grants the admin role to the owner and admins specified in the config.\\r\\n    /// @param _config The configuration for the pool.\\r\\n    function configure(PoolConfig memory _config) public override onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        super._configure(_config);\\r\\n\\r\\n        // Grant the admin role to the owner and admins specified in the config\\r\\n        _grantRole(ADMIN_ROLE, _config.owner);\\r\\n        for (uint256 i = 0; i < _config.admins.length; i++) {\\r\\n            _grantRole(ADMIN_ROLE, _config.admins[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// ==============================================\\r\\n    /// ========== Transaction And Accounting ========\\r\\n    /// ==============================================\\r\\n\\r\\n    /// @notice Tops up the pool with the specified amount of tokens configured in either initialize() or configure() then updates the amountDeployed tracking variable.\\r\\n    /// @param amount The amount of tokens to top up the pool with.\\r\\n    function fund(uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        require(config.distributionToken != address(0), \\\"Token (distribution token) not set\\\");\\r\\n\\r\\n        // Create proper arrays for _allocate\\r\\n        address[] memory recipients = new address[](1);\\r\\n        recipients[0] = address(this);\\r\\n        \\r\\n        uint256[] memory amounts = new uint256[](1);\\r\\n        amounts[0] = amount;\\r\\n        \\r\\n        bytes[] memory data = new bytes[](1);\\r\\n        data[0] = \\\"\\\";\\r\\n\\r\\n        _allocate(recipients, amounts, config.distributionToken, data);\\r\\n\\r\\n        totalFunded += amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from the contract to recipients.\\r\\n    /// @dev This function can only be called by the contract owner or admins.\\r\\n    /// @param recipients The addresses of the recipients to distribute tokens to.\\r\\n    /// @param amounts The amounts of tokens to distribute to each recipient.\\r\\n    /// @param data Additional data that can be used during distribution, such as attestation UIDs.\\r\\n    function distribute(address[] memory recipients, uint256[] memory amounts, bytes[] memory data)\\r\\n        external\\r\\n        onlyRole(ADMIN_ROLE)\\r\\n        nonReentrant\\r\\n    {\\r\\n        _distribute(recipients, amounts, config.distributionToken, data);\\r\\n\\r\\n        for (uint256 i = 0; i < recipients.length; i++) {\\r\\n            totalDistributed += amounts[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Performs necessary checks before distributing tokens to recipients.\\r\\n    /// @dev This function is called internally before the actual distribution of tokens.\\r\\n    /// @param recipient The address of the recipient to distribute tokens to.\\r\\n    /// @param amount The amount of tokens to distribute to the recipient.\\r\\n    /// @param token The address of the token to distribute.\\r\\n    /// @param data Additional data that can be used during distribution, such as attestation UIDs.\\r\\n    function _beforeDistribute(address recipient, uint256 amount, address token, bytes memory data) internal override {\\r\\n        // decode and unpack data\\r\\n        (bytes32 claimAttestationUID, bytes32 goalAttestationUID) = abi.decode(data, (bytes32, bytes32));\\r\\n\\r\\n        // TODO: here, we retrieve the claim attestation, the goal attestation, and confirm the conditions\\r\\n        // TODO: at the moment zone geofencing conditions are complicated if at all possible because of geojson calculations which are heavylifted by libraries in web2, but not in solidity)\\r\\n        // TODO: not to mention how much gas it would cost to do this in solidity\\r\\n\\r\\n        // additional checks\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        require(amount <= balance, \\\"Amount exceeds balance\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Sends the contract's balance back to the owner.\\r\\n    /// @dev This function can only be called by the contract owner.\\r\\n    function liquidate() external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\r\\n        require(config.distributionToken != address(0), \\\"Token (distribution token) not set\\\");\\r\\n        uint256 balance = IERC20(config.distributionToken).balanceOf(address(this));\\r\\n\\r\\n        if (balance > 0) {\\r\\n            SafeERC20.safeTransfer(IERC20(config.distributionToken), _msgSender(), balance);\\r\\n            totalFunded -= balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// ===============================\\r\\n    /// ========== Data Access ========\\r\\n    /// ===============================\\r\\n\\r\\n    /// @notice Returns the total amount of tokens funded in the pool.\\r\\n    function getTotalFunded() external view returns (uint256) {\\r\\n        return totalFunded;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the total amount of tokens distributed from the pool.\\r\\n    function getTotalDistributed() external view returns (uint256) {\\r\\n        return totalDistributed;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3dfb3c6dc5c65db2f525215335a8278b435b75b92d0c316f2f7d6b2e2cd8bb24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600c556000600d553480156200001b57600080fd5b5060405162002d6d38038062002d6d8339810160408190526200003e9162000176565b828282336001600160a01b03167f72aeb8e4e073b2b6fc374bc9e1acd0b59d25c19bc96e662f34e973d1ad9ff9fc848484604051620000809392919062000235565b60405180910390a2600862000096838262000303565b50506001600b5550620003cf9350505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620000dc578181015183820152602001620000c2565b50506000910152565b600082601f830112620000f757600080fd5b81516001600160401b0380821115620001145762000114620000a9565b604051601f8301601f19908116603f011681019082821181831017156200013f576200013f620000a9565b816040528381528660208588010111156200015957600080fd5b6200016c846020830160208901620000bf565b9695505050505050565b6000806000606084860312156200018c57600080fd5b83516001600160401b0380821115620001a457600080fd5b620001b287838801620000e5565b94506020860151915080821115620001c957600080fd5b620001d787838801620000e5565b93506040860151915080821115620001ee57600080fd5b50620001fd86828701620000e5565b9150509250925092565b6000815180845262000221816020860160208601620000bf565b601f01601f19169290920160200192915050565b6060815260006200024a606083018662000207565b82810360208401526200025e818662000207565b905082810360408401526200016c818562000207565b600181811c908216806200028957607f821691505b602082108103620002aa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002fe57600081815260208120601f850160051c81016020861015620002d95750805b601f850160051c820191505b81811015620002fa57828155600101620002e5565b5050505b505050565b81516001600160401b038111156200031f576200031f620000a9565b620003378162000330845462000274565b84620002b0565b602080601f8311600181146200036f5760008415620003565750858301515b600019600386901b1c1916600185901b178555620002fa565b600085815260208120601f198616915b82811015620003a0578886015182559484019460019091019084016200037f565b5085821015620003bf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61298e80620003df6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063906b89c6116100c3578063b214c3d91161007c578063b214c3d9146102f7578063c922da54146102ff578063ca1d209d14610312578063d547741f14610325578063eede8aea14610338578063f8895cc81461034b57600080fd5b8063906b89c61461028057806391d1485414610293578063942e6bcf146102a657806394a68925146102c9578063a217fddf146102dc578063ab21f507146102e457600080fd5b8063580867751161011557806358086775146101ee578063747ffca21461020157806375b238fc1461021457806379502c5514610229578063805bfc47146102425780638150864d1461025557600080fd5b806301ffc9a71461015d578063248a9ca31461018557806328a07025146101b65780632f2ff15d146101c057806336568abe146101d35780635695fa58146101e6575b600080fd5b61017061016b366004611d0b565b610360565b60405190151581526020015b60405180910390f35b6101a8610193366004611d35565b6000908152600a602052604090206001015490565b60405190815260200161017c565b6101be610397565b005b6101be6101ce366004611d73565b610492565b6101be6101e1366004611d73565b6104bd565b600d546101a8565b6101be6101fc366004611e80565b6104f5565b6101be61020f366004612066565b610500565b6101a860008051602061293983398151915281565b61023161050c565b60405161017c959493929190612152565b6101be610250366004612198565b6105bf565b600e54610268906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101be61028e366004612215565b610653565b6101706102a1366004611d73565b61065f565b6102b96102b4366004612297565b61068a565b60405161017c94939291906122ca565b6101be6102d7366004612464565b6107d1565b6101a8600081565b6101be6102f23660046124a0565b61085a565b600c546101a8565b6101be61030d366004611e80565b610927565b6101be610320366004611d35565b610932565b6101be610333366004611d73565b610aee565b6101be610346366004612066565b610b13565b610353610b1f565b60405161017c9190612503565b60006001600160e01b03198216637965db0b60e01b148061039157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103a281610bad565b6103aa610bb7565b6004546001600160a01b03166103db5760405162461bcd60e51b81526004016103d290612516565b60405180910390fd5b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190612558565b905080156104845760045461046c906001600160a01b03163383610be1565b80600c600082825461047e9190612587565b90915550505b5061048f6001600b55565b50565b6000828152600a60205260409020600101546104ad81610bad565b6104b78383610c33565b50505050565b6001600160a01b03811633146104e65760405163334bd91960e11b815260040160405180910390fd5b6104f08282610cc7565b505050565b6104f0838383610d34565b6104b784848484610e98565b60018054600354600454600554600780546001600160a01b03958616969486169590931693919261053c9061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546105689061259a565b80156105b55780601f1061058a576101008083540402835291602001916105b5565b820191906000526020600020905b81548152906001019060200180831161059857829003601f168201915b5050505050905085565b6000805160206129398339815191526105d781610bad565b6105df610bb7565b6004546105f990859085906001600160a01b031685610e98565b60005b845181101561064857838181518110610617576106176125d4565b6020026020010151600d600082825461063091906125ea565b90915550819050610640816125fd565b9150506105fc565b506104b76001600b55565b6104b784848484611239565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6009602052600090815260409020805460018201805460ff8316936101009093046001600160a01b03169291906106c09061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546106ec9061259a565b80156107395780601f1061070e57610100808354040283529160200191610739565b820191906000526020600020905b81548152906001019060200180831161071c57829003601f168201915b50505050509080600201805461074e9061259a565b80601f016020809104026020016040519081016040528092919081815260200182805461077a9061259a565b80156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b5050505050905084565b60006107dc81610bad565b6107e5826112dd565b6108016000805160206129398339815191528360000151610c33565b5060005b8260200151518110156104f0576108476000805160206129398339815191528460200151838151811061083a5761083a6125d4565b6020026020010151610c33565b5080610852816125fd565b915050610805565b61086482826113cd565b8051156108b0576000818060200190518101906108819190612616565b90506001600160a01b038116156108ae57600e80546001600160a01b0319166001600160a01b0383161790555b505b81516108be90600090610c33565b506108db6000805160206129398339815191528360000151610c33565b5060005b8260200151518110156104f0576109146000805160206129398339815191528460200151838151811061083a5761083a6125d4565b508061091f816125fd565b9150506108df565b6104f08383836114d9565b600061093d81610bad565b610945610bb7565b600082116109955760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016103d2565b6004546001600160a01b03166109bd5760405162461bcd60e51b81526004016103d290612516565b6040805160018082528183019092526000916020808301908036833701905050905030816000815181106109f3576109f36125d4565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508381600081518110610a4457610a446125d4565b6020908102919091010152604080516001808252818301909252600091816020015b6060815260200190600190039081610a665790505090506040518060200160405280600081525081600081518110610aa057610aa06125d4565b6020908102919091010152600454610ac590849084906001600160a01b031684611647565b84600c6000828254610ad791906125ea565b90915550506001600b5550610aea915050565b5050565b6000828152600a6020526040902060010154610b0981610bad565b6104b78383610cc7565b6104b784848484611647565b60088054610b2c9061259a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b589061259a565b8015610ba55780601f10610b7a57610100808354040283529160200191610ba5565b820191906000526020600020905b815481529060010190602001808311610b8857829003601f168201915b505050505081565b61048f8133611934565b6002600b5403610bda57604051633ee5aeb560e01b815260040160405180910390fd5b6002600b55565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104f090849061196d565b6000610c3f838361065f565b610cbf576000838152600a602090815260408083206001600160a01b03861684529091529020805460ff19166001179055610c773390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610391565b506000610391565b6000610cd3838361065f565b15610cbf576000838152600a602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610391565b6001600160a01b0383811660009081526009602052604090205461010090041615610d965760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016103d2565b60408051608081018252600080825233602080840191909152828401869052606083018590526001600160a01b0387168252600990529190912081518154829060ff19166001836002811115610dee57610dee6122b4565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b031990911617815560408201516001820190610e2d9082612679565b5060608201516002820190610e429082612679565b50905050336001600160a01b0316836001600160a01b03167f99202cc5abf24650e7ac53e3a81ff614768dcc7569a245376ed82eb4ce243fca8484604051610e8b929190612738565b60405180910390a3505050565b83518015801590610ea95750835181145b610eea5760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103d2565b60005b8181101561123157600083518210610f145760405180602001604052806000815250610f2f565b838281518110610f2657610f266125d4565b60200260200101515b905060006001600160a01b0316878381518110610f4e57610f4e6125d4565b60200260200101516001600160a01b031603610fa85760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103d2565b6000868381518110610fbc57610fbc6125d4565b602002602001015111801561105157506040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190612558565b868381518110611046576110466125d4565b602002602001015111155b6110a75760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206973207a65726f206f7220657863656564732062616c616e636044820152606560f81b60648201526084016103d2565b6110e58783815181106110bc576110bc6125d4565b60200260200101518784815181106110d6576110d66125d4565b602002602001015187846119d0565b846001600160a01b031663a9059cbb888481518110611106576111066125d4565b6020026020010151888581518110611120576111206125d4565b60200260200101516040518363ffffffff1660e01b81526004016111599291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190612766565b508682815181106111af576111af6125d4565b60200260200101516001600160a01b0316306001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b758885815181106111fd576111fd6125d4565b6020026020010151888560405161121693929190612788565b60405180910390a35080611229816125fd565b915050610eed565b505050505050565b6001600160a01b038416600090815260096020526040902060ff84166002811115611266576112666122b4565b8154829060ff19166001836002811115611282576112826122b4565b0217905550336001600160a01b0316856001600160a01b03167f76dfcb7079d175d526d40b126e4a1cc466c3855e25ba5b37c3168609060e1d788686866040516112ce939291906127b2565b60405180910390a35050505050565b8051600180546001600160a01b0319166001600160a01b03909216919091178155602080830151805184939261131892600292910190611be2565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a08201518051611378916005840191602090910190611c47565b5060c0820151600682019061138d9082612679565b50506040513391507f7262fa021611ce5fba1be5b0e369cd9209c8d8408b2f67329285403f6d5a048d906113c2908490612824565b60405180910390a250565b60005460ff16156114165760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016103d2565b60008054600160ff199091168117909155825181546001600160a01b0319166001600160a01b03909116178155602080840151805185939261145d92600292910190611be2565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a082015180516114bd916005840191602090910190611c47565b5060c082015160068201906114d29082612679565b5050505050565b6001600160a01b0383811660009081526009602052604090205461010090041633146115475760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206f776e657220746f2075706461746500000000000000000060448201526064016103d2565b60016001600160a01b03841660009081526009602052604090205460ff166002811115611576576115766122b4565b036115b65760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185c1c1c9bdd995960821b60448201526064016103d2565b6001600160a01b03831660009081526009602052604090206001016115db8382612679565b506001600160a01b03831660009081526009602052604090206002016116018282612679565b50336001600160a01b0316836001600160a01b03167f639b764af06689bf35c6ebc1ae49051aa4b4d3a3d34d5c70bf8626087352e99d8484604051610e8b929190612738565b835180158015906116585750835181145b6116995760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103d2565b60005b81811015611231576000835182106116c357604051806020016040528060008152506116de565b8382815181106116d5576116d56125d4565b60200260200101515b905060006001600160a01b03168783815181106116fd576116fd6125d4565b60200260200101516001600160a01b0316036117575760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103d2565b600086838151811061176b5761176b6125d4565b6020026020010151116117b15760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b60448201526064016103d2565b6117e08783815181106117c6576117c66125d4565b60200260200101518784815181106104f0576104f06125d4565b846001600160a01b03166323b872dd33898581518110611802576118026125d4565b602002602001015189868151811061181c5761181c6125d4565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561187b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189f9190612766565b508682815181106118b2576118b26125d4565b60200260200101516001600160a01b0316336001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b75888581518110611900576119006125d4565b6020026020010151888560405161191993929190612788565b60405180910390a3508061192c816125fd565b91505061169c565b61193e828261065f565b610aea5760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016103d2565b60006119826001600160a01b03841683611aab565b905080516000141580156119a75750808060200190518101906119a59190612766565b155b156104f057604051635274afe760e01b81526001600160a01b03841660048201526024016103d2565b600080828060200190518101906119e791906128f8565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a579190612558565b905080861115611aa25760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b60448201526064016103d2565b50505050505050565b6060611ab983836000611ac0565b9392505050565b606081471015611ae55760405163cd78605960e01b81523060048201526024016103d2565b600080856001600160a01b03168486604051611b01919061291c565b60006040518083038185875af1925050503d8060008114611b3e576040519150601f19603f3d011682016040523d82523d6000602084013e611b43565b606091505b5091509150611b53868383611b5d565b9695505050505050565b606082611b7257611b6d82611bb9565b611ab9565b8151158015611b8957506001600160a01b0384163b155b15611bb257604051639996b31560e01b81526001600160a01b03851660048201526024016103d2565b5080611ab9565b805115611bc95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b828054828255906000526020600020908101928215611c37579160200282015b82811115611c3757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611c02565b50611c43929150611cf6565b5090565b82805482825590600052602060002090600301600490048101928215611c375791602002820160005b83821115611cba57835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302611c70565b8015611ced5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302611cba565b5050611c439291505b5b80821115611c435760008155600101611cf7565b600060208284031215611d1d57600080fd5b81356001600160e01b031981168114611ab957600080fd5b600060208284031215611d4757600080fd5b5035919050565b6001600160a01b038116811461048f57600080fd5b8035611d6e81611d4e565b919050565b60008060408385031215611d8657600080fd5b823591506020830135611d9881611d4e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715611ddb57611ddb611da3565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611e0957611e09611da3565b604052919050565b600082601f830112611e2257600080fd5b81356001600160401b03811115611e3b57611e3b611da3565b611e4e601f8201601f1916602001611de1565b818152846020838601011115611e6357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215611e9557600080fd5b8335611ea081611d4e565b925060208401356001600160401b0380821115611ebc57600080fd5b611ec887838801611e11565b93506040860135915080821115611ede57600080fd5b50611eeb86828701611e11565b9150509250925092565b60006001600160401b03821115611f0e57611f0e611da3565b5060051b60200190565b600082601f830112611f2957600080fd5b81356020611f3e611f3983611ef5565b611de1565b82815260059290921b84018101918181019086841115611f5d57600080fd5b8286015b84811015611f81578035611f7481611d4e565b8352918301918301611f61565b509695505050505050565b600082601f830112611f9d57600080fd5b81356020611fad611f3983611ef5565b82815260059290921b84018101918181019086841115611fcc57600080fd5b8286015b84811015611f815780358352918301918301611fd0565b600082601f830112611ff857600080fd5b81356020612008611f3983611ef5565b82815260059290921b8401810191818101908684111561202757600080fd5b8286015b84811015611f815780356001600160401b0381111561204a5760008081fd5b6120588986838b0101611e11565b84525091830191830161202b565b6000806000806080858703121561207c57600080fd5b84356001600160401b038082111561209357600080fd5b61209f88838901611f18565b955060208701359150808211156120b557600080fd5b6120c188838901611f8c565b9450604087013591506120d382611d4e565b909250606086013590808211156120e957600080fd5b506120f687828801611fe7565b91505092959194509250565b60005b8381101561211d578181015183820152602001612105565b50506000910152565b6000815180845261213e816020860160208601612102565b601f01601f19169290920160200192915050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a06080820181905260009061218d90830184612126565b979650505050505050565b6000806000606084860312156121ad57600080fd5b83356001600160401b03808211156121c457600080fd5b6121d087838801611f18565b945060208601359150808211156121e657600080fd5b6121f287838801611f8c565b9350604086013591508082111561220857600080fd5b50611eeb86828701611fe7565b6000806000806080858703121561222b57600080fd5b843561223681611d4e565b9350602085013560ff8116811461224c57600080fd5b925060408501356001600160401b038082111561226857600080fd5b61227488838901611e11565b9350606087013591508082111561228a57600080fd5b506120f687828801611e11565b6000602082840312156122a957600080fd5b8135611ab981611d4e565b634e487b7160e01b600052602160045260246000fd5b6000600386106122ea57634e487b7160e01b600052602160045260246000fd5b8582526001600160a01b038516602083015260806040830181905261231190830185612126565b828103606084015261218d8185612126565b600082601f83011261233457600080fd5b81356020612344611f3983611ef5565b82815260059290921b8401810191818101908684111561236357600080fd5b8286015b84811015611f815780356001600160401b03811681146123875760008081fd5b8352918301918301612367565b600060e082840312156123a657600080fd5b6123ae611db9565b90506123b982611d63565b815260208201356001600160401b03808211156123d557600080fd5b6123e185838601611f18565b60208401526123f260408501611d63565b604084015261240360608501611d63565b60608401526080840135608084015260a084013591508082111561242657600080fd5b61243285838601612323565b60a084015260c084013591508082111561244b57600080fd5b5061245884828501611e11565b60c08301525092915050565b60006020828403121561247657600080fd5b81356001600160401b0381111561248c57600080fd5b61249884828501612394565b949350505050565b600080604083850312156124b357600080fd5b82356001600160401b03808211156124ca57600080fd5b6124d686838701612394565b935060208501359150808211156124ec57600080fd5b506124f985828601611e11565b9150509250929050565b602081526000611ab96020830184612126565b60208082526022908201527f546f6b656e2028646973747269627574696f6e20746f6b656e29206e6f742073604082015261195d60f21b606082015260800190565b60006020828403121561256a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561039157610391612571565b600181811c908216806125ae57607f821691505b6020821081036125ce57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561039157610391612571565b60006001820161260f5761260f612571565b5060010190565b60006020828403121561262857600080fd5b8151611ab981611d4e565b601f8211156104f057600081815260208120601f850160051c8101602086101561265a5750805b601f850160051c820191505b8181101561123157828155600101612666565b81516001600160401b0381111561269257612692611da3565b6126a6816126a0845461259a565b84612633565b602080601f8311600181146126db57600084156126c35750858301515b600019600386901b1c1916600185901b178555611231565b600085815260208120601f198616915b8281101561270a578886015182559484019460019091019084016126eb565b50858210156127285787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061274b6040830185612126565b828103602084015261275d8185612126565b95945050505050565b60006020828403121561277857600080fd5b81518015158114611ab957600080fd5b8381526001600160a01b038316602082015260606040820181905260009061275d90830184612126565b60ff841681526060602082015260006127ce6060830185612126565b8281036040840152611b538185612126565b600081518084526020808501945080840160005b838110156128195781516001600160401b0316875295820195908201906001016127f4565b509495945050505050565b602080825282516001600160a01b03908116838301528382015160e060408501528051610100850181905260009392918301919084906101208701905b8083101561288357845184168252938501936001929092019190850190612861565b5060408801516001600160a01b0381166060890152945060608801516001600160a01b03811660808901529450608088015160a088015260a08801519450601f199350838782030160c08801526128da81866127e0565b945050505060c0850151818584030160e0860152611b538382612126565b6000806040838503121561290b57600080fd5b505080516020909101519092909150565b6000825161292e818460208701612102565b919091019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212206955ab1a4ee64f4bbd70a64618716a2becb2c0700f02660e8c7bc518d77606ea64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063906b89c6116100c3578063b214c3d91161007c578063b214c3d9146102f7578063c922da54146102ff578063ca1d209d14610312578063d547741f14610325578063eede8aea14610338578063f8895cc81461034b57600080fd5b8063906b89c61461028057806391d1485414610293578063942e6bcf146102a657806394a68925146102c9578063a217fddf146102dc578063ab21f507146102e457600080fd5b8063580867751161011557806358086775146101ee578063747ffca21461020157806375b238fc1461021457806379502c5514610229578063805bfc47146102425780638150864d1461025557600080fd5b806301ffc9a71461015d578063248a9ca31461018557806328a07025146101b65780632f2ff15d146101c057806336568abe146101d35780635695fa58146101e6575b600080fd5b61017061016b366004611d0b565b610360565b60405190151581526020015b60405180910390f35b6101a8610193366004611d35565b6000908152600a602052604090206001015490565b60405190815260200161017c565b6101be610397565b005b6101be6101ce366004611d73565b610492565b6101be6101e1366004611d73565b6104bd565b600d546101a8565b6101be6101fc366004611e80565b6104f5565b6101be61020f366004612066565b610500565b6101a860008051602061293983398151915281565b61023161050c565b60405161017c959493929190612152565b6101be610250366004612198565b6105bf565b600e54610268906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101be61028e366004612215565b610653565b6101706102a1366004611d73565b61065f565b6102b96102b4366004612297565b61068a565b60405161017c94939291906122ca565b6101be6102d7366004612464565b6107d1565b6101a8600081565b6101be6102f23660046124a0565b61085a565b600c546101a8565b6101be61030d366004611e80565b610927565b6101be610320366004611d35565b610932565b6101be610333366004611d73565b610aee565b6101be610346366004612066565b610b13565b610353610b1f565b60405161017c9190612503565b60006001600160e01b03198216637965db0b60e01b148061039157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006103a281610bad565b6103aa610bb7565b6004546001600160a01b03166103db5760405162461bcd60e51b81526004016103d290612516565b60405180910390fd5b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190612558565b905080156104845760045461046c906001600160a01b03163383610be1565b80600c600082825461047e9190612587565b90915550505b5061048f6001600b55565b50565b6000828152600a60205260409020600101546104ad81610bad565b6104b78383610c33565b50505050565b6001600160a01b03811633146104e65760405163334bd91960e11b815260040160405180910390fd5b6104f08282610cc7565b505050565b6104f0838383610d34565b6104b784848484610e98565b60018054600354600454600554600780546001600160a01b03958616969486169590931693919261053c9061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546105689061259a565b80156105b55780601f1061058a576101008083540402835291602001916105b5565b820191906000526020600020905b81548152906001019060200180831161059857829003601f168201915b5050505050905085565b6000805160206129398339815191526105d781610bad565b6105df610bb7565b6004546105f990859085906001600160a01b031685610e98565b60005b845181101561064857838181518110610617576106176125d4565b6020026020010151600d600082825461063091906125ea565b90915550819050610640816125fd565b9150506105fc565b506104b76001600b55565b6104b784848484611239565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6009602052600090815260409020805460018201805460ff8316936101009093046001600160a01b03169291906106c09061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546106ec9061259a565b80156107395780601f1061070e57610100808354040283529160200191610739565b820191906000526020600020905b81548152906001019060200180831161071c57829003601f168201915b50505050509080600201805461074e9061259a565b80601f016020809104026020016040519081016040528092919081815260200182805461077a9061259a565b80156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b5050505050905084565b60006107dc81610bad565b6107e5826112dd565b6108016000805160206129398339815191528360000151610c33565b5060005b8260200151518110156104f0576108476000805160206129398339815191528460200151838151811061083a5761083a6125d4565b6020026020010151610c33565b5080610852816125fd565b915050610805565b61086482826113cd565b8051156108b0576000818060200190518101906108819190612616565b90506001600160a01b038116156108ae57600e80546001600160a01b0319166001600160a01b0383161790555b505b81516108be90600090610c33565b506108db6000805160206129398339815191528360000151610c33565b5060005b8260200151518110156104f0576109146000805160206129398339815191528460200151838151811061083a5761083a6125d4565b508061091f816125fd565b9150506108df565b6104f08383836114d9565b600061093d81610bad565b610945610bb7565b600082116109955760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016103d2565b6004546001600160a01b03166109bd5760405162461bcd60e51b81526004016103d290612516565b6040805160018082528183019092526000916020808301908036833701905050905030816000815181106109f3576109f36125d4565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508381600081518110610a4457610a446125d4565b6020908102919091010152604080516001808252818301909252600091816020015b6060815260200190600190039081610a665790505090506040518060200160405280600081525081600081518110610aa057610aa06125d4565b6020908102919091010152600454610ac590849084906001600160a01b031684611647565b84600c6000828254610ad791906125ea565b90915550506001600b5550610aea915050565b5050565b6000828152600a6020526040902060010154610b0981610bad565b6104b78383610cc7565b6104b784848484611647565b60088054610b2c9061259a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b589061259a565b8015610ba55780601f10610b7a57610100808354040283529160200191610ba5565b820191906000526020600020905b815481529060010190602001808311610b8857829003601f168201915b505050505081565b61048f8133611934565b6002600b5403610bda57604051633ee5aeb560e01b815260040160405180910390fd5b6002600b55565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104f090849061196d565b6000610c3f838361065f565b610cbf576000838152600a602090815260408083206001600160a01b03861684529091529020805460ff19166001179055610c773390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610391565b506000610391565b6000610cd3838361065f565b15610cbf576000838152600a602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610391565b6001600160a01b0383811660009081526009602052604090205461010090041615610d965760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016103d2565b60408051608081018252600080825233602080840191909152828401869052606083018590526001600160a01b0387168252600990529190912081518154829060ff19166001836002811115610dee57610dee6122b4565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b031990911617815560408201516001820190610e2d9082612679565b5060608201516002820190610e429082612679565b50905050336001600160a01b0316836001600160a01b03167f99202cc5abf24650e7ac53e3a81ff614768dcc7569a245376ed82eb4ce243fca8484604051610e8b929190612738565b60405180910390a3505050565b83518015801590610ea95750835181145b610eea5760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103d2565b60005b8181101561123157600083518210610f145760405180602001604052806000815250610f2f565b838281518110610f2657610f266125d4565b60200260200101515b905060006001600160a01b0316878381518110610f4e57610f4e6125d4565b60200260200101516001600160a01b031603610fa85760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103d2565b6000868381518110610fbc57610fbc6125d4565b602002602001015111801561105157506040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190612558565b868381518110611046576110466125d4565b602002602001015111155b6110a75760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206973207a65726f206f7220657863656564732062616c616e636044820152606560f81b60648201526084016103d2565b6110e58783815181106110bc576110bc6125d4565b60200260200101518784815181106110d6576110d66125d4565b602002602001015187846119d0565b846001600160a01b031663a9059cbb888481518110611106576111066125d4565b6020026020010151888581518110611120576111206125d4565b60200260200101516040518363ffffffff1660e01b81526004016111599291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119c9190612766565b508682815181106111af576111af6125d4565b60200260200101516001600160a01b0316306001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b758885815181106111fd576111fd6125d4565b6020026020010151888560405161121693929190612788565b60405180910390a35080611229816125fd565b915050610eed565b505050505050565b6001600160a01b038416600090815260096020526040902060ff84166002811115611266576112666122b4565b8154829060ff19166001836002811115611282576112826122b4565b0217905550336001600160a01b0316856001600160a01b03167f76dfcb7079d175d526d40b126e4a1cc466c3855e25ba5b37c3168609060e1d788686866040516112ce939291906127b2565b60405180910390a35050505050565b8051600180546001600160a01b0319166001600160a01b03909216919091178155602080830151805184939261131892600292910190611be2565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a08201518051611378916005840191602090910190611c47565b5060c0820151600682019061138d9082612679565b50506040513391507f7262fa021611ce5fba1be5b0e369cd9209c8d8408b2f67329285403f6d5a048d906113c2908490612824565b60405180910390a250565b60005460ff16156114165760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016103d2565b60008054600160ff199091168117909155825181546001600160a01b0319166001600160a01b03909116178155602080840151805185939261145d92600292910190611be2565b5060408201516002820180546001600160a01b039283166001600160a01b03199182161790915560608401516003840180549190931691161790556080820151600482015560a082015180516114bd916005840191602090910190611c47565b5060c082015160068201906114d29082612679565b5050505050565b6001600160a01b0383811660009081526009602052604090205461010090041633146115475760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206f776e657220746f2075706461746500000000000000000060448201526064016103d2565b60016001600160a01b03841660009081526009602052604090205460ff166002811115611576576115766122b4565b036115b65760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185c1c1c9bdd995960821b60448201526064016103d2565b6001600160a01b03831660009081526009602052604090206001016115db8382612679565b506001600160a01b03831660009081526009602052604090206002016116018282612679565b50336001600160a01b0316836001600160a01b03167f639b764af06689bf35c6ebc1ae49051aa4b4d3a3d34d5c70bf8626087352e99d8484604051610e8b929190612738565b835180158015906116585750835181145b6116995760405162461bcd60e51b81526020600482015260126024820152714d69736d617463686564206c656e6774687360701b60448201526064016103d2565b60005b81811015611231576000835182106116c357604051806020016040528060008152506116de565b8382815181106116d5576116d56125d4565b60200260200101515b905060006001600160a01b03168783815181106116fd576116fd6125d4565b60200260200101516001600160a01b0316036117575760405162461bcd60e51b8152602060048201526019602482015278526563697069656e74206973207a65726f206164647265737360381b60448201526064016103d2565b600086838151811061176b5761176b6125d4565b6020026020010151116117b15760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b60448201526064016103d2565b6117e08783815181106117c6576117c66125d4565b60200260200101518784815181106104f0576104f06125d4565b846001600160a01b03166323b872dd33898581518110611802576118026125d4565b602002602001015189868151811061181c5761181c6125d4565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561187b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189f9190612766565b508682815181106118b2576118b26125d4565b60200260200101516001600160a01b0316336001600160a01b03167f68179208818f375bd941a067e321c35e8cebc048007cd126acd94625989a7b75888581518110611900576119006125d4565b6020026020010151888560405161191993929190612788565b60405180910390a3508061192c816125fd565b91505061169c565b61193e828261065f565b610aea5760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016103d2565b60006119826001600160a01b03841683611aab565b905080516000141580156119a75750808060200190518101906119a59190612766565b155b156104f057604051635274afe760e01b81526001600160a01b03841660048201526024016103d2565b600080828060200190518101906119e791906128f8565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a579190612558565b905080861115611aa25760405162461bcd60e51b8152602060048201526016602482015275416d6f756e7420657863656564732062616c616e636560501b60448201526064016103d2565b50505050505050565b6060611ab983836000611ac0565b9392505050565b606081471015611ae55760405163cd78605960e01b81523060048201526024016103d2565b600080856001600160a01b03168486604051611b01919061291c565b60006040518083038185875af1925050503d8060008114611b3e576040519150601f19603f3d011682016040523d82523d6000602084013e611b43565b606091505b5091509150611b53868383611b5d565b9695505050505050565b606082611b7257611b6d82611bb9565b611ab9565b8151158015611b8957506001600160a01b0384163b155b15611bb257604051639996b31560e01b81526001600160a01b03851660048201526024016103d2565b5080611ab9565b805115611bc95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b828054828255906000526020600020908101928215611c37579160200282015b82811115611c3757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611c02565b50611c43929150611cf6565b5090565b82805482825590600052602060002090600301600490048101928215611c375791602002820160005b83821115611cba57835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302611c70565b8015611ced5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302611cba565b5050611c439291505b5b80821115611c435760008155600101611cf7565b600060208284031215611d1d57600080fd5b81356001600160e01b031981168114611ab957600080fd5b600060208284031215611d4757600080fd5b5035919050565b6001600160a01b038116811461048f57600080fd5b8035611d6e81611d4e565b919050565b60008060408385031215611d8657600080fd5b823591506020830135611d9881611d4e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715611ddb57611ddb611da3565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611e0957611e09611da3565b604052919050565b600082601f830112611e2257600080fd5b81356001600160401b03811115611e3b57611e3b611da3565b611e4e601f8201601f1916602001611de1565b818152846020838601011115611e6357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215611e9557600080fd5b8335611ea081611d4e565b925060208401356001600160401b0380821115611ebc57600080fd5b611ec887838801611e11565b93506040860135915080821115611ede57600080fd5b50611eeb86828701611e11565b9150509250925092565b60006001600160401b03821115611f0e57611f0e611da3565b5060051b60200190565b600082601f830112611f2957600080fd5b81356020611f3e611f3983611ef5565b611de1565b82815260059290921b84018101918181019086841115611f5d57600080fd5b8286015b84811015611f81578035611f7481611d4e565b8352918301918301611f61565b509695505050505050565b600082601f830112611f9d57600080fd5b81356020611fad611f3983611ef5565b82815260059290921b84018101918181019086841115611fcc57600080fd5b8286015b84811015611f815780358352918301918301611fd0565b600082601f830112611ff857600080fd5b81356020612008611f3983611ef5565b82815260059290921b8401810191818101908684111561202757600080fd5b8286015b84811015611f815780356001600160401b0381111561204a5760008081fd5b6120588986838b0101611e11565b84525091830191830161202b565b6000806000806080858703121561207c57600080fd5b84356001600160401b038082111561209357600080fd5b61209f88838901611f18565b955060208701359150808211156120b557600080fd5b6120c188838901611f8c565b9450604087013591506120d382611d4e565b909250606086013590808211156120e957600080fd5b506120f687828801611fe7565b91505092959194509250565b60005b8381101561211d578181015183820152602001612105565b50506000910152565b6000815180845261213e816020860160208601612102565b601f01601f19169290920160200192915050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a06080820181905260009061218d90830184612126565b979650505050505050565b6000806000606084860312156121ad57600080fd5b83356001600160401b03808211156121c457600080fd5b6121d087838801611f18565b945060208601359150808211156121e657600080fd5b6121f287838801611f8c565b9350604086013591508082111561220857600080fd5b50611eeb86828701611fe7565b6000806000806080858703121561222b57600080fd5b843561223681611d4e565b9350602085013560ff8116811461224c57600080fd5b925060408501356001600160401b038082111561226857600080fd5b61227488838901611e11565b9350606087013591508082111561228a57600080fd5b506120f687828801611e11565b6000602082840312156122a957600080fd5b8135611ab981611d4e565b634e487b7160e01b600052602160045260246000fd5b6000600386106122ea57634e487b7160e01b600052602160045260246000fd5b8582526001600160a01b038516602083015260806040830181905261231190830185612126565b828103606084015261218d8185612126565b600082601f83011261233457600080fd5b81356020612344611f3983611ef5565b82815260059290921b8401810191818101908684111561236357600080fd5b8286015b84811015611f815780356001600160401b03811681146123875760008081fd5b8352918301918301612367565b600060e082840312156123a657600080fd5b6123ae611db9565b90506123b982611d63565b815260208201356001600160401b03808211156123d557600080fd5b6123e185838601611f18565b60208401526123f260408501611d63565b604084015261240360608501611d63565b60608401526080840135608084015260a084013591508082111561242657600080fd5b61243285838601612323565b60a084015260c084013591508082111561244b57600080fd5b5061245884828501611e11565b60c08301525092915050565b60006020828403121561247657600080fd5b81356001600160401b0381111561248c57600080fd5b61249884828501612394565b949350505050565b600080604083850312156124b357600080fd5b82356001600160401b03808211156124ca57600080fd5b6124d686838701612394565b935060208501359150808211156124ec57600080fd5b506124f985828601611e11565b9150509250929050565b602081526000611ab96020830184612126565b60208082526022908201527f546f6b656e2028646973747269627574696f6e20746f6b656e29206e6f742073604082015261195d60f21b606082015260800190565b60006020828403121561256a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561039157610391612571565b600181811c908216806125ae57607f821691505b6020821081036125ce57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561039157610391612571565b60006001820161260f5761260f612571565b5060010190565b60006020828403121561262857600080fd5b8151611ab981611d4e565b601f8211156104f057600081815260208120601f850160051c8101602086101561265a5750805b601f850160051c820191505b8181101561123157828155600101612666565b81516001600160401b0381111561269257612692611da3565b6126a6816126a0845461259a565b84612633565b602080601f8311600181146126db57600084156126c35750858301515b600019600386901b1c1916600185901b178555611231565b600085815260208120601f198616915b8281101561270a578886015182559484019460019091019084016126eb565b50858210156127285787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061274b6040830185612126565b828103602084015261275d8185612126565b95945050505050565b60006020828403121561277857600080fd5b81518015158114611ab957600080fd5b8381526001600160a01b038316602082015260606040820181905260009061275d90830184612126565b60ff841681526060602082015260006127ce6060830185612126565b8281036040840152611b538185612126565b600081518084526020808501945080840160005b838110156128195781516001600160401b0316875295820195908201906001016127f4565b509495945050505050565b602080825282516001600160a01b03908116838301528382015160e060408501528051610100850181905260009392918301919084906101208701905b8083101561288357845184168252938501936001929092019190850190612861565b5060408801516001600160a01b0381166060890152945060608801516001600160a01b03811660808901529450608088015160a088015260a08801519450601f199350838782030160c08801526128da81866127e0565b945050505060c0850151818584030160e0860152611b538382612126565b6000806040838503121561290b57600080fd5b505080516020909101519092909150565b6000825161292e818460208701612102565b919091019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212206955ab1a4ee64f4bbd70a64618716a2becb2c0700f02660e8c7bc518d77606ea64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "configure((address,address[],address,address,uint256,uint64[],string))": {
        "params": {
          "_config": "The configuration for the pool."
        }
      },
      "distribute(address[],uint256[],bytes[])": {
        "details": "This function can only be called by the contract owner or admins.",
        "params": {
          "amounts": "The amounts of tokens to distribute to each recipient.",
          "data": "Additional data that can be used during distribution, such as attestation UIDs.",
          "recipients": "The addresses of the recipients to distribute tokens to."
        }
      },
      "fund(uint256)": {
        "params": {
          "amount": "The amount of tokens to top up the pool with."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize((address,address[],address,address,uint256,uint64[],string),bytes)": {
        "params": {
          "_config": "The configuration for the pool.",
          "data": "Additional data that can be used during initialization."
        }
      },
      "liquidate()": {
        "details": "This function can only be called by the contract owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configure((address,address[],address,address,uint256,uint64[],string))": {
        "notice": "Configures the pool with the provided configuration and grants the admin role to the owner and admins specified in the config."
      },
      "distribute(address[],uint256[],bytes[])": {
        "notice": "Transfers tokens from the contract to recipients."
      },
      "fund(uint256)": {
        "notice": "Tops up the pool with the specified amount of tokens configured in either initialize() or configure() then updates the amountDeployed tracking variable."
      },
      "getTotalDistributed()": {
        "notice": "Returns the total amount of tokens distributed from the pool."
      },
      "getTotalFunded()": {
        "notice": "Returns the total amount of tokens funded in the pool."
      },
      "initialize((address,address[],address,address,uint256,uint64[],string),bytes)": {
        "notice": "Initializes the pool with the provided configuration and grants the admin role to the owner and admins specified in the config."
      },
      "liquidate()": {
        "notice": "Sends the contract's balance back to the owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1843,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1846,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(PoolConfig)1687_storage"
      },
      {
        "astId": 1848,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "schema",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 1853,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "registrations",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Registration)1701_storage)"
      },
      {
        "astId": 522,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "_roles",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)517_storage)"
      },
      {
        "astId": 1572,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2466,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "totalFunded",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2469,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "totalDistributed",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2472,
        "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
        "label": "eas",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IEAS)372"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IEAS)372": {
        "encoding": "inplace",
        "label": "contract IEAS",
        "numberOfBytes": "20"
      },
      "t_enum(Status)1691": {
        "encoding": "inplace",
        "label": "enum IPool.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Registration)1701_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPool.Registration)",
        "numberOfBytes": "32",
        "value": "t_struct(Registration)1701_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)517_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)517_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolConfig)1687_storage": {
        "encoding": "inplace",
        "label": "struct PoolConfig",
        "members": [
          {
            "astId": 1672,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1675,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "admins",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1677,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "allocationToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1679,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "distributionToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1681,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "maxAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1684,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "timestamps",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint64)dyn_storage"
          },
          {
            "astId": 1686,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "metadataURI",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Registration)1701_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Registration",
        "members": [
          {
            "astId": 1694,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)1691"
          },
          {
            "astId": 1696,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1698,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1700,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)517_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 514,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 516,
            "contract": "contracts/strategies/SilviVerificationStrategy.sol:SilviVerificationStrategy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}